# A sample Makefile for building Google Test and using it in user
# tests.  Please tweak it to suit your environment and project.  You
# may want to move it to your project's root directory.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# Please tweak the following variable definitions as needed by your
# project, except GTEST_HEADERS, which you can use in your own targets
# but shouldn't modify.

# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file.
GTEST_DIR = $(HOME)/Dev/googletest/googletest

# Where to find user code.
USER_DIR = ..

# Flags passed to the preprocessor.
# Set Google Test's header directory as a system directory, such that
# the compiler doesn't generate warnings in Google Test headers.
CPPFLAGS += -isystem $(GTEST_DIR)/include

# Flags passed to the C++ compiler.
CXXFLAGS += -g -Wall -Wextra -pthread -std=c++11 `sdl2-config --cflags`

SDL_LDFLAGS := $(shell sdl2-config --libs)

LFLAGS = $(SDL_LDFLAGS)

# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.
TESTS = component_test entity_test units_test test_run
TEST_OBJS = component_test.o entity_test.o units_test.o
OBJS = component.o entity.o event_emitter.o renderer.o units.o


# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

all : test_run

clean :
	rm -f $(TESTS) test gtest.a gtest_main.a *.o

gtest-all.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest-all.cc

gtest_main.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest_main.cc

gtest.a : gtest-all.o
	$(AR) $(ARFLAGS) $@ $^

gtest_main.a : gtest-all.o gtest_main.o
	$(AR) $(ARFLAGS) $@ $^

# Builds a sample test.  A test should link with either gtest.a or
# gtest_main.a, depending on whether it defines its own main()
# function.



# libs
entity.o: $(USER_DIR)/entity.cpp \
					 $(USER_DIR)/component.h \
					 $(USER_DIR)/event_emitter.h \
					 $(USER_DIR)/renderer.h \
					 $(USER_DIR)/units.h \
					 $(USER_DIR)/component.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/entity.cpp $(LFLAGS)

component.o: $(USER_DIR)/component.cpp \
						 $(USER_DIR)/component.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/component.cpp $(LFLAGS)

event_emitter.o: $(USER_DIR)/event_emitter.cpp \
				 $(USER_DIR)/event_emitter.h
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/event_emitter.cpp $(LFLAGS)

renderer.o: $(USER_DIR)/renderer.cpp \
					  $(USER_DIR)/renderer.h \
						$(USER_DIR)/units.h 
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/renderer.cpp $(LFLAGS)

units.o: $(USER_DIR)/units.cpp \
				 $(USER_DIR)/units.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/units.cpp $(LFLAGS)

#
# tests
component_test.o: $(USER_DIR)/component_test.cc\
									$(USER_DIR)/component.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/component_test.cc $(LFLAGS)

entity_test.o: $(USER_DIR)/entity_test.cc \
							 $(USER_DIR)/entity.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/entity_test.cc $(LFLAGS)

units_test.o: $(USER_DIR)/units_test.cpp \
							$(USER_DIR)/units.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/units_test.cpp $(LFLAGS)

test_run.o: $(USER_DIR)/test_run.cpp $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/test_run.cpp $(LFLAGS)

test_run: $(OBJS) $(TEST_OBJS) gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@
