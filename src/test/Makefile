# A sample Makefile for building Google Test and using it in user
# tests.  Please tweak it to suit your environment and project.  You
# may want to move it to your project's root directory.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# Please tweak the following variable definitions as needed by your
# project, except GTEST_HEADERS, which you can use in your own targets
# but shouldn't modify.

# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file.
ifndef GTEST_DIR
GTEST_DIR := $(HOME)/Dev/googletest/googletest
endif
ifndef GMOCK_DIR
GMOCK_DIR := $(HOME)/Dev/googletest/googlemock
endif

# Where to find user code.
SDL_LDFLAGS := $(shell sdl2-config --libs)
export CC = g++
export LIBNAME = gaming.a
export XFLAGS = -Wall -g -std=c++11 `sdl2-config --cflags`
export LFLAGS = $(SDL_LDFLAGS)
export CFLAGS = $(XFLAGS)
export DISTDIR := ./

USER_DIR = ..
SUBDIRS = $(USER_DIR)/lib

# Flags passed to the preprocessor.
# Set Google Test's header directory as a system directory, such that
# the compiler doesn't generate warnings in Google Test headers.
CPPFLAGS += -isystem $(GTEST_DIR)/include -isystem $(GMOCK_DIR)/include

# Flags passed to the C++ compiler.
CXXFLAGS += -g -Wall -Wextra -pthread -std=c++11 `sdl2-config --cflags`

SDL_LDFLAGS := $(shell sdl2-config --libs)

LFLAGS = $(SDL_LDFLAGS)

# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.
OBJS := c_boundable.o c_evented.o c_moveable.o s_bound.o s_movement.o s_sdl_events.o


# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

GMOCK_HEADERS = $(GMOCK_DIR)/include/gmock/*.h \
                $(GMOCK_DIR)/include/gmock/internal/*.h \
                $(GTEST_HEADERS)

GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)
GMOCK_SRCS_ = $(GMOCK_DIR)/src/*.cc $(GMOCK_HEADERS)

all : test_run

clean :
	rm -f $(TESTS) moveable_test test gtest.a gtest_main.a *.o gmock.a gmock_main.a $(SUBDIRS)/gaming.a

gtest-all.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) -I$(GMOCK_DIR) $(CXXFLAGS) \
            -c $(GTEST_DIR)/src/gtest-all.cc

gmock-all.o : $(GMOCK_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) -I$(GMOCK_DIR) $(CXXFLAGS) \
            -c $(GMOCK_DIR)/src/gmock-all.cc

gmock_main.o : $(GMOCK_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) -I$(GMOCK_DIR) $(CXXFLAGS) \
            -c $(GMOCK_DIR)/src/gmock_main.cc

gmock.a : gmock-all.o gtest-all.o
	$(AR) $(ARFLAGS) $@ $^

gmock_main.a : gmock-all.o gtest-all.o gmock_main.o
	$(AR) $(ARFLAGS) $@ $^


# libs
c_boundable.o : $(USER_DIR)/c_boundable.h \
								$(USER_DIR)/c_boundable.cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/c_boundable.cpp $(LFLAGS)

s_bound.o : $(USER_DIR)/s_bound.h \
						$(USER_DIR)/s_bound.cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/s_bound.cpp $(LFLAGS)

c_evented.o : $(USER_DIR)/c_evented.h \
							$(USER_DIR)/c_evented.cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/c_evented.cpp $(LFLAGS)

c_rectangular.o: $(USER_DIR)/c_rectangular.h \
								 $(USER_DIR)/c_rectangular.cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/c_rectangular.cpp $(LFLAGS)

s_sdl_events.o : $(USER_DIR)/c_evented.h \
								 $(USER_DIR)/s_sdl_events.h \
								 $(USER_DIR)/s_sdl_events.cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/s_sdl_events.cpp $(LFLAGS)

c_moveable.o : $(USER_DIR)/c_moveable.h \
							 $(USER_DIR)/c_moveable.cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/c_moveable.cpp $(LFLAGS)

s_movement.o: $(USER_DIR)/s_movement.h \
							$(USER_DIR)/s_movement.cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/s_movement.cpp $(LFLAGS)

s_rectangle_renderer.o: $(USER_DIR)/s_rectangle_renderer.h \
												$(USER_DIR)/s_rectangle_renderer.cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/s_rectangle_renderer.cpp $(LFLAGS)

# tests
bound_test.o: $(USER_DIR)/bound_test.cpp \
							$(USER_DIR)/c_boundable.h \
							$(USER_DIR)/s_bound.h
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/bound_test.cpp $(LFLAGS)

events_test.o : $(USER_DIR)/c_evented.h \
								$(USER_DIR)/s_sdl_events.h \
								$(USER_DIR)/events_test.cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/events_test.cpp $(LFLAGS)

integration_test.o: $(USER_DIR)/integration_test.cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/integration_test.cpp $(LFLAGS)

movement_test.o: $(USER_DIR)/movement_test.cpp \
								 $(USER_DIR)/c_moveable.h  \
								 $(USER_DIR)/s_movement.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/movement_test.cpp $(LFLAGS)

rectangle_test.o: $(USER_DIR)/rectangle_test.cpp \
									$(USER_DIR)/s_rectangle_renderer.o \
									$(USER_DIR)/c_rectangular.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/rectangle_test.cpp $(LFLAGS)

test_run.o: $(USER_DIR)/test_run.cpp $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/test_run.cpp $(LFLAGS)

bound_test: c_boundable.o s_bound.o bound_test.o gmock_main.a $(SUBDIRS)/gaming.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@ $(LFLAGS)

events_test: c_evented.o s_sdl_events.o events_test.o gmock_main.a $(SUBDIRS)/gaming.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@ $(LFLAGS)

integration_test: integration_test.o gmock_main.a $(OBJS) $(SUBDIRS)/gaming.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@ $(LFLAGS)

movement_test: c_moveable.o s_movement.o movement_test.o gmock_main.a $(SUBDIRS)/gaming.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@ $(LFLAGS)

rectangle_test: c_rectangular.o s_rectangle_renderer.o rectangle_test.o gmock_main.a $(SUBDIRS)/gaming.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@ $(LFLAGS)


.PHONY: $(SUBDIRS)/gaming.a $(SUBDIRS)
$(SUBDIRS)/gaming.a: $(SUBDIRS)
$(SUBDIRS):
	$(MAKE) -C $@
